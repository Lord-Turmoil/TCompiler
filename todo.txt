2023/10/14 TS:

Must keep clear in mind what to do in Enter and what to do in Exit!
Do not mix them up!

For Decl, we can have several utility functions:
    1. Count how many child node of a given type, for dimension.
    2. Array serialization, for init value.
    3. Only add to symbol table in Exit!

And, we may need some utility function that could generate unique name
for duplicated name.
____________________________________________________________

2023/10/15 TS:

For the type of expression, we can get it at ExitExp, then let its parent
decide whether the type is correct or not.

However, internal type mismatch, i.e. ARRAY + INT will be reported within
Exp, and the type of it will be "repaired" as INT.

For array, its type will directly be received by LVal, then pulled up to
Exp. (Actually, we can let it be in LVal, and later get it via Synthesized
Attribute.) When we get type of LVal, we can ignore whether the variable
is declared or not, and treat it all as INT. However, it indeed needs to be
checked, only generate other errors.

In Exp, every time there is a join, we need to check whether the type is
correct or not. And pull the type up to here. If type mismatch happens,
we need to report error, and repair the type as INT.

Well, a step further, we pull the type in each exp node! So that we can
directly get it, without the worries that the exp has an invalid type.

2023/10/16 TS:

Make syntactic parser recover from errors.

2023/10/17 TS:

BUG: getint() didn't report missing ) and ;

-----

2023/10/31 TS:

Task for intermediate representation generation:

Step 1.
  * 1. For simple variable and constant declaration.
  * 2. For expression.
  * 3. For assignment.

Step 2.
  * 1. For function definition.
  * 2. For function call.

Step 3.
    1. For for loop.
    2. For if-else statement.

Step 4.
    1. Introduce array.

g++ -o a.out $(find . -type f -iname *.cpp -print)
