/*******************************************************************************
 * Copyright (C) Tony's Studio 2018 - 2023. All rights reserved.
 *
 *   For BUAA 2023 Compiler Technology
 */

// ==================== Decl

// ===== ConstDecl
const int _CONST_VAR_A = 3;
const int _CONST_VAR_B = 4, _CONST_VAR_C = 5;
// 1-D
const int _CONST_ARR_1D_A[3] = { 1, 2, 3 };
const int _CONST_ARR_1D_B[1 * 2] = { 1, 2 }, _CONST_ARR_1D_C[2] = { 1, 2 * 1 + 0 };
// 2-D
const int _CONST_ARR_2D_A[2][2] = {{ 1, 2 }, { 3, 4 }};
const int _CONST_ARR_2D_B[2][2] = {{ 1, 2 }, { 3, 2 * 2 + 0 }}, _CONST_ARR_2D_C[2][2] = {{ 1, 2 }, { 3 * 1 + 0, 4 }};

// ===== VarDecl
int _var_a = 3;
int _var_b = 4, _var_c = 5;
int _var_d, _var_e;
// 1-D
int _var_1d_a[3] = { 1, 2, 3 * 5 - 12 };
int _var_1d_b[2] = { _CONST_VAR_A, 2 }, _var_1d_c[2] = { _CONST_VAR_B, 4 };
int _var_1d_d[2];
// 2-D
int _var_2d_a[2][2] = {{ 1, 2 }, { 3, 4 }};
int _var_2d_b[2][2] = {{ 1, 2 }, { 3, 4 }}, _var_2d_c[2][2] = {{ 1, 2 }, { 3, 4 }};
int _var_2d_d[2][2];

// ==================== FuncDef
void _f1()
{
    // Block is empty.
}

void _f2()
{
    return;
}

int _f3(int val, int a[], int b[][2])
{
    // ===== Block
    // Decl
    int _a;
    int _b = 3 * 4 + _var_a / _CONST_VAR_B + _var_1d_a[0] % _CONST_ARR_2D_A[0][0];
    int predicate = 1;

    // Stmt
    if (predicate)
    {
    }

    // Forget this... :)
    ;;;;;

    return val + a[0] + b[0][0];
}


// ==================== FuncDef (Actually in use)
// this function has side effect, use in short circuit

int should_be_66 = 66;

int side_effect()
{
    should_be_66 = 99;
    return 1;
}

int return_true()
{
    return 1;
}

int return_false()
{
    return 0;
}

// ========= Test Functions

void test_if()
{
    // OrExp - AndExp - EqExp - RelExp - AddExp - MulExp - UnaryExp - PrimaryExp - LVal
    int a = 3;
    if (a)
        printf("A ");
    // OrExp - AndExp - EqExp - RelExp - AddExp - MulExp - UnaryExp - PrimaryExp - Number
    if (65535)
        printf("B ");
    // OrExp - AndExp - EqExp - RelExp - AddExp - MulExp - UnaryExp - PrimaryExp - (Exp)
    if ((_var_a * a % 2 + 1))
        printf("C ");
    // OrExp - AndExp - EqExp - RelExp - AddExp - MulExp - UnaryExp - Ident
    // OrExp - AndExp - EqExp - RelExp - AddExp - MulExp - UnaryExp - UnaryOp - UnaryExp
    if (!return_true())
        printf("X ");
    else if (return_false())
        printf("X ");
    else
        printf("D ");
    // OrExp - AndExp - EqExp - RelExp - AddExp
    if (3 * 4 - _var_a + return_true())
        printf("E\n");

    if (a * 1< 5);
    else if (a <= 5 * 6 + 7);
    else if (1 - 5 * 4 > a % 1);
    else if (5 * 5 - 25 >= 985);
    else
        printf("RelExp passed\n");

    // short circuit
    int sc_true = 1, sc_false = 0;
    if (sc_false || return_true() || side_effect())
    {
        printf("Short circuit (||): %d\n", should_be_66);
    }
    if (sc_true && return_false() && side_effect())
    {
        printf("Short circuit (&&): %d\n", should_be_66);
    }

    printf("test_if() complete\n");
}

void test_for()
{
    int i;
    // OrExp - AndExp - EqExp - RelExp
    for (i = 0; i < 5; i += 1)
        continue;
    // i = 5
    for (; i - 5 >= _var_a * 1 + 0; i += 1)
        continue;
    // i = 9
    // OrExp - AndExp - EqExp
    for (; ; i += 1)
    {
        if (i * 2 == 10 * 2 + return_false())
            break;
    }

    // i = 10
    // OrExp - AndExp - EqExp - RelExp
    for (; ; )
    {
        // i != 10
        if (i * 1 / 1 != 10 % 3 * 10 + 6 % 3)
            break;
        i = i + 1;
    }

    printf("test_for() complete\n");
}

void test_io()
{
    // 66
    printf("getint() = %d\n", getint());

    int a;
    a = getint();
    printf("a = %d, a * 2 + 3 mod 1 * 5 = %d\n", a, a * 2 + 3 % 1 * 5);

    printf("test_io() complete\n");
}

void test_array(int a[], int b[][2])
{
    // assignment (LVal) (doesn't change original value)

    // getint() return 0
    a[0] = b[0][0] + b[0][1] * b[0][2] * getint();
    b[0][2 / 3] = a[0] * 5 - 9 % 5;

    printf("a[0] = %d\n", a[0]);    // 1
    printf("b[0][0] = %d\n", b[0][0]);  // 1

    printf("test_array() complete\n");
}

void test_function()
{
    // function call
    _f1();
    _f2();
    _f3(1, _var_1d_a, _var_2d_a);
    _f3(1, _var_2d_a[0], _var_2d_a);

    printf("test_function() complete\n");
}

void test_trivia()
{
    // These are generated by Copilot... :P
    // empty
    ;

    // empty block
    {
    }

    // empty block
    {
        ;
    }

    // empty block
    {
        {
        }
    }

    // empty block
    {
        {
            ;
        }
    }

    int a = -+-+5;  // unary operator

    printf("test_trivia() complete\n");
}

// ==================== MainFuncDef
int main()
{
    printf("21371300\n");

    test_io();
    test_array(_var_1d_a, _var_2d_a);
    test_for();
    test_if();
    test_function();

    return 0;
}
